# 🚀 BFS Optimization & Queue Usage in JavaScript (with Deque Insights)

This document summarizes key lessons, optimizations, and best practices discovered while solving a BFS problem like `highestPeak`. It covers time/space complexity, queue behavior, array syntax, and the advantages of using a **deque**.

---

## ✅ Problem Overview

You are given a 2D grid `isWater` where:
- `1` represents water.
- `0` represents land.

Your goal is to assign a height to each cell such that:
- Water cells have height 0.
- Heights increase by 1 for each cell moving away from the water.
- You must use **multi-source BFS** to compute this efficiently.

---

## ❌ Original Mistake: `.shift()` Causes TLE

```ts
queue.shift();
❗ Why it's slow:
.shift() removes the first item of a JavaScript array.

But this is O(n) time because all remaining items must shift left.

💥 Result: TLE on large inputs (e.g., 1000x1000 grids)
✅ Fix: Use a Pointer Instead of shift()
ts

let head = 0;
while (head < queue.length) {
    const [x, y] = queue[head++]; // O(1)
}
✅ Why it works:
queue.push() still adds to the end.

Instead of removing the front, you just advance a pointer.

This mimics FIFO behavior but avoids shifting elements.

📦 Efficient 2D Array Initialization
ts


let result = Array.from({ length: row }, () => Array(col).fill(-1));
❓ Why not new Array(row).fill(new Array(col).fill(-1))?
That would create shared inner arrays, leading to unexpected mutation bugs. The correct way ensures each row is a separate array.

🧠 Deque: Double-Ended Queue
✅ What is a Deque?
A deque allows:

Operation	Description	Time
pushBack()	Add to end	O(1)
popBack()	Remove from end	O(1)
pushFront()	Add to front	O(1)
popFront()	Remove from front	O(1)

❌ JavaScript Arrays:
Operation	Time
push()	O(1)
pop()	O(1)
shift()	O(n) ❌
unshift()	O(n) ❌

✅ When to use Deque:
Sliding window algorithms

Monotonic queues

Optimized BFS with variable weights

✅ Libraries:
collections/deque

Or implement your own using linked lists

🧪 Final Optimized BFS Code (No TLE)
```ts
function highestPeak(isWater: number[][]): number[][] {
    let row = isWater.length;
    let col = isWater[0].length;
    let result = Array.from({ length: row }, () => Array(col).fill(-1));

    let queue: [number, number][] = [];
    let head = 0;

    for (let r = 0; r < row; r++) {
        for (let c = 0; c < col; c++) {
            if (isWater[r][c] === 1) {
                result[r][c] = 0;
                queue.push([r, c]);
            }
        }
    }

    const directions = [[1, 0], [-1, 0], [0, 1], [0, -1]];

    while (head < queue.length) {
        const [x, y] = queue[head++];
        const val = result[x][y];

        for (let [dx, dy] of directions) {
            let nx = x + dx;
            let ny = y + dy;

            if (nx >= 0 && ny >= 0 && nx < row && ny < col && result[nx][ny] === -1) {
                result[nx][ny] = val + 1;
                queue.push([nx, ny]);
            }
        }
    }

    return result;
}
```
📈 Time and Space Complexity
Time Complexity: O(m * n)

Every cell is visited once in BFS.

Space Complexity: O(m * n)

For the result array and queue.

🔚 Summary
Topic	Key Takeaway
.shift() in JS Arrays	Avoid in performance-critical code (O(n))
Queue Optimization	Use a pointer for O(1) front access
2D Array Syntax	Use Array.from() to avoid shared references
Deque	Use when you need O(1) push/pop at both ends
BFS with Multi-Source	Initialize all sources, then BFS layer-by-layer